{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","Movie","movie","poster","Poster","class","alt","Title","src","Year","Search","useState","searchValue","setSearchValue","id","type","value","onChange","e","target","onClick","preventDefault","search","App","loading","setLoading","movies","setMovies","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","jsonObjs","text","jsonResponse","console","log","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sPAYeA,G,MAVA,SAACC,GACd,OACE,6BACA,yBAAKC,UAAU,eAClB,uBAAGA,UAAU,oBAAoBC,KAAK,iCAAtC,2BCkBcC,EAnBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTC,EACa,QAAjBD,EAAME,OAJR,iEAIuDF,EAAME,OAC7D,OACE,yBAAKL,UAAU,iBACb,yBAAKM,MAAM,QACT,yBAAKA,MAAM,cACT,yBAAKC,IAAG,8BAAyBJ,EAAMK,OAASC,IAAKL,KAEvD,yBAAKE,MAAM,gBACT,0BAAMA,MAAM,2BAA2BH,EAAMK,OAE7C,+BAAKL,EAAMO,KAAX,SCgCKC,EA/CA,SAAAZ,GAAU,IAAD,EACgBa,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,KAiBtB,OACI,0BAAMd,UAAU,IACR,yBAAKA,UAAU,kBAErB,yBAAKA,UAAU,2BACb,uBAAGA,UAAU,yBAAb,SACA,2BACEe,GAAG,cACHC,KAAK,OACLhB,UAAU,WACViB,MAAOJ,EACPK,SAzBuB,SAAAC,GAC/BL,EAAeK,EAAEC,OAAOH,WA2BpB,yBAAKjB,UAAU,0BACb,4BACEqB,QAtBiB,SAAAF,GACzBA,EAAEG,iBACFvB,EAAMwB,OAAOV,GALbC,EAAe,KA0BPE,KAAK,SACLC,MAAM,SACNjB,UAAU,gCAJZ,SAME,uBAAGM,MAAM,wBAAT,aCuBGkB,EAtDH,WAAO,IAAD,EACcZ,oBAAS,GADvB,mBACTa,EADS,KACAC,EADA,OAEYd,mBAAS,IAFrB,mBAETe,EAFS,KAEDC,EAFC,OAGwBhB,mBAAS,MAHjC,mBAGTiB,EAHS,KAGKC,EAHL,KAKhBC,qBAAU,WACRC,MARF,gEASKC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJR,EAAUQ,EAASzB,QACnBe,GAAW,QAEd,IAoBH,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAQqC,KAAK,wBACb,kBAAC,EAAD,CAAQd,OArBG,SAAAV,GACba,GAAW,GACXI,EAAgB,MAEhBE,MAAM,8BAAD,OAA+BnB,EAA/B,qBACFoB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAK,GACJC,QAAQC,IAAIF,GACkB,SAA1BA,EAAaG,UACfb,EAAUU,EAAa3B,QACvBe,GAAW,KAEXI,EAAgBQ,EAAaI,OAC7BhB,GAAW,UAUf,yBAAK1B,UAAU,OACZyB,IAAYI,EACX,4CACEA,EACF,yBAAK7B,UAAU,gBAAgB6B,GAE/BF,EAAOgB,KAAI,SAACxC,EAAOyC,GAAR,OACT,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAczC,EAAMK,OAASL,MAAOA,UC3CtC2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.d25eb7ef.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => {\n  return (\n    <nav>\n    <div className=\"nav-wrapper\">\n\t<a className=\"brand-logo center\" href=\"https://natemkelley.github.io\">Kelley Movie Search</a>\n    </div>\n  </nav>\n  );\n};\n\nexport default Header;","import React from \"react\";\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://popcornusa.s3.amazonaws.com/placeholder-movieimage.png\";\n\nconst Movie = ({ movie }) => {\n  const poster =\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n  return (\n    <div className=\"col s12 m4 l3\">\n      <div class=\"card\">\n        <div class=\"card-image\">\n          <img alt={`The movie titled is ${movie.Title}`} src={poster} />\n        </div>\n        <div class=\"card-content\">\n          <span class=\"card-title center-align\">{movie.Title}</span>\n\n          <p>({movie.Year})</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React, { useState } from \"react\";\n\nconst Search = props => {\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const handleSearchInputChanges = e => {\n    setSearchValue(e.target.value);\n  };\n\n  const resetInputField = () => {\n    setSearchValue(\"\");\n  };\n\n  const callSearchFunction = e => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  };\n\n  return (\n      <form className=\"\">\n              <div className=\"row search-bar\">\n\n        <div className=\"input-field movie-input\">\n          <i className=\"material-icons prefix\">movie</i>\n          <input\n            id=\"icon_prefix\"\n            type=\"text\"\n            className=\"validate\"\n            value={searchValue}\n            onChange={handleSearchInputChanges}\n          />\n        </div>\n        <div className=\"input-field search-btn\">\n          <button\n            onClick={callSearchFunction}\n            type=\"submit\"\n            value=\"SEARCH\"\n            className=\"btn waves-effect waves-light\"           >\n            Search\n            <i class=\"material-icons right\">send</i>\n          </button>\n        </div>\n        </div>\n\n      </form>\n  );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL =\n  \"https://www.omdbapi.com/?s=Lord+of+the+Rings&apikey=4a3b711b\";\n\nconst App = () => {\n  const [loading, setLoading] = useState(true); //renders loading when set to true\n  const [movies, setMovies] = useState([]); //handles array from server\n  const [errorMessage, setErrorMessage] = useState(null); //handles errers from server\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => {\n        return response.json(); //https://developer.mozilla.org/en-US/docs/Web/API/Body/json\n      })\n      .then(jsonObjs => {\n        setMovies(jsonObjs.Search);\n        setLoading(false);\n      });\n  }, []);\n\n  const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        console.log(jsonResponse);\n        if (jsonResponse.Response === \"True\") {\n          setMovies(jsonResponse.Search);\n          setLoading(false);\n        } else {\n          setErrorMessage(jsonResponse.Error);\n          setLoading(false);\n        }\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <Header text=\"Kelley Movie Search\" />\n      <Search search={search} />\n\n      <div className=\"row\">\n        {loading && !errorMessage ? (\n          <span>loading...</span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}